/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"HelloWorld","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Test connectivity","events":[],"recommendations":{}},{"name":"register_agency","args":[{"type":"string","name":"agency_name"},{"type":"string","name":"description"},{"type":"string","name":"contact_info"},{"type":"string","name":"wallet_address"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Register agency with wallet address for escrow","events":[],"recommendations":{}},{"name":"search_agencies","args":[{"type":"string","name":"search_term"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Search agencies by name or service","events":[],"recommendations":{}},{"name":"get_all_agencies","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all registered agencies","events":[],"recommendations":{}},{"name":"get_stats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get service statistics","events":[],"recommendations":{}},{"name":"get_service_info","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get service information","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"agency_count":{"keyType":"AVMString","valueType":"AVMString","key":"YWdlbmN5X2NvdW50"},"search_count":{"keyType":"AVMString","valueType":"AVMString","key":"c2VhcmNoX2NvdW50"},"agencies_list":{"keyType":"AVMString","valueType":"AVMString","key":"YWdlbmNpZXNfbGlzdA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[136,220,244,268,298,346],"errorMessage":"OnCompletion is not NoOp"},{"pc":[381],"errorMessage":"can only call when creating"},{"pc":[139,223,247,271,301,349],"errorMessage":"can only call when not creating"},{"pc":[461,604,660],"errorMessage":"check self.agencies_list exists"},{"pc":[474,682],"errorMessage":"check self.agency_count exists"},{"pc":[590,718],"errorMessage":"check self.search_count exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuaGVsbG9fd29ybGQuY29udHJhY3QuSGVsbG9Xb3JsZC5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgImFnZW5jeV9jb3VudCIgInNlYXJjaF9jb3VudCIgImFnZW5jaWVzX2xpc3QiIDB4MTUxZjdjNzUgIjAiICIxIiAifCIgIjIiCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6Ny04CiAgICAvLyAjIFVzZSBTdHJpbmcgZm9yIGNvdW50ZXJzIHRvIGF2b2lkIFVJbnQ2NCBmcm9udGVuZCBpc3N1ZXMKICAgIC8vIHNlbGYuYWdlbmN5X2NvdW50ID0gR2xvYmFsU3RhdGUoU3RyaW5nKCIwIikpCiAgICBieXRlY18wIC8vICJhZ2VuY3lfY291bnQiCiAgICBieXRlYyA0IC8vICIwIgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo5CiAgICAvLyBzZWxmLnNlYXJjaF9jb3VudCA9IEdsb2JhbFN0YXRlKFN0cmluZygiMCIpKQogICAgYnl0ZWNfMSAvLyAic2VhcmNoX2NvdW50IgogICAgYnl0ZWMgNCAvLyAiMCIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6MTEtMTIKICAgIC8vICMgU3RvcmUgYWdlbmNpZXMgYXM6IG5hbWV8ZGVzY3JpcHRpb258Y29udGFjdHxhZGRyZXNzOwogICAgLy8gc2VsZi5hZ2VuY2llc19saXN0ID0gR2xvYmFsU3RhdGUoU3RyaW5nKCIiKSkKICAgIGJ5dGVjXzIgLy8gImFnZW5jaWVzX2xpc3QiCiAgICBwdXNoYnl0ZXMgIiIKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBIZWxsb1dvcmxkKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTEKICAgIHB1c2hieXRlc3MgMHgwMmJlY2UxMSAweGFhOTA0YWNhIDB4OThmZjlkODcgMHg5MmNlNTY1ZiAweDE0OTg5ZDJiIDB4ZTA5ZDg0YzAgLy8gbWV0aG9kICJoZWxsbyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJyZWdpc3Rlcl9hZ2VuY3koc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAic2VhcmNoX2FnZW5jaWVzKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldF9hbGxfYWdlbmNpZXMoKXN0cmluZyIsIG1ldGhvZCAiZ2V0X3N0YXRzKClzdHJpbmciLCBtZXRob2QgImdldF9zZXJ2aWNlX2luZm8oKXN0cmluZyIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5faGVsbG9fcm91dGVANSBtYWluX3JlZ2lzdGVyX2FnZW5jeV9yb3V0ZUA2IG1haW5fc2VhcmNoX2FnZW5jaWVzX3JvdXRlQDcgbWFpbl9nZXRfYWxsX2FnZW5jaWVzX3JvdXRlQDggbWFpbl9nZXRfc3RhdHNfcm91dGVAOSBtYWluX2dldF9zZXJ2aWNlX2luZm9fcm91dGVAMTAKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBIZWxsb1dvcmxkKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldF9zZXJ2aWNlX2luZm9fcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NzQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwNDI0MTZjNjc2ZjcyNjE2ZTY0MjA0NTczNjM3MjZmNzcyMDUzNjU3Mjc2Njk2MzY1MjAyZDIwNDM2ZjZlNmU2NTYzNzQ2OTZlNjcyMDQzNmM2OTY1NmU3NDczMjA3NzY5NzQ2ODIwNTQ3Mjc1NzM3NDY1NjQyMDQxNjc2NTZlNjM2OTY1NzMKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfc3RhdHNfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo2OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3N0YXRzCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRfYWxsX2FnZW5jaWVzX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NjQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9hbGxfYWdlbmNpZXMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3NlYXJjaF9hZ2VuY2llc19yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjQ4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NDgKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBzZWFyY2hfYWdlbmNpZXMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3JlZ2lzdGVyX2FnZW5jeV9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6MTkKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiByZWdpc3Rlcl9hZ2VuY3kKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2hlbGxvX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6MTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgSGVsbG9Xb3JsZChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weToxNAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGhlbGxvCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgSGVsbG9Xb3JsZChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMwogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuaGVsbG9fd29ybGQuY29udHJhY3QuSGVsbG9Xb3JsZC5oZWxsbyhuYW1lOiBieXRlcykgLT4gYnl0ZXM6CmhlbGxvOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjE0LTE1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBoZWxsbyhzZWxmLCBuYW1lOiBTdHJpbmcpIC0+IFN0cmluZzoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjE3CiAgICAvLyByZXR1cm4gU3RyaW5nKCJIZWxsbyAiKSArIG5hbWUgKyBTdHJpbmcoIiAtIFdlbGNvbWUgdG8gRXNjcm93IFNlcnZpY2UhIikKICAgIHB1c2hieXRlcyAiSGVsbG8gIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIC0gV2VsY29tZSB0byBFc2Nyb3cgU2VydmljZSEiCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5oZWxsb193b3JsZC5jb250cmFjdC5IZWxsb1dvcmxkLnJlZ2lzdGVyX2FnZW5jeShhZ2VuY3lfbmFtZTogYnl0ZXMsIGRlc2NyaXB0aW9uOiBieXRlcywgY29udGFjdF9pbmZvOiBieXRlcywgd2FsbGV0X2FkZHJlc3M6IGJ5dGVzKSAtPiBieXRlczoKcmVnaXN0ZXJfYWdlbmN5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjE5LTI2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiByZWdpc3Rlcl9hZ2VuY3koCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBhZ2VuY3lfbmFtZTogU3RyaW5nLAogICAgLy8gICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsCiAgICAvLyAgICAgY29udGFjdF9pbmZvOiBTdHJpbmcsCiAgICAvLyAgICAgd2FsbGV0X2FkZHJlc3M6IFN0cmluZwogICAgLy8gKSAtPiBTdHJpbmc6CiAgICBwcm90byA0IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weToyOC0yOQogICAgLy8gIyBDcmVhdGUgYWdlbmN5IGVudHJ5OiBuYW1lfGRlc2NyaXB0aW9ufGNvbnRhY3R8YWRkcmVzczsKICAgIC8vIGFnZW5jeV9lbnRyeSA9IGFnZW5jeV9uYW1lICsgU3RyaW5nKCJ8IikgKyBkZXNjcmlwdGlvbiArIFN0cmluZygifCIpICsgY29udGFjdF9pbmZvICsgU3RyaW5nKCJ8IikgKyB3YWxsZXRfYWRkcmVzcyArIFN0cmluZygiOyIpCiAgICBmcmFtZV9kaWcgLTQKICAgIGJ5dGVjIDYgLy8gInwiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBieXRlYyA2IC8vICJ8IgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgYnl0ZWMgNiAvLyAifCIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiOyIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyAjIEFkZCB0byBhZ2VuY2llcyBsaXN0CiAgICAvLyBjdXJyZW50X2xpc3QgPSBzZWxmLmFnZW5jaWVzX2xpc3QudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhZ2VuY2llc19saXN0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFnZW5jaWVzX2xpc3QgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYuYWdlbmNpZXNfbGlzdC52YWx1ZSA9IGN1cnJlbnRfbGlzdCArIGFnZW5jeV9lbnRyeQogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18yIC8vICJhZ2VuY2llc19saXN0IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTozNS0zNgogICAgLy8gIyBJbmNyZW1lbnQgY291bnRlciAoc2ltcGxpZmllZCkKICAgIC8vIGN1cnJlbnRfY291bnQgPSBzZWxmLmFnZW5jeV9jb3VudC52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImFnZW5jeV9jb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWdlbmN5X2NvdW50IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjM3CiAgICAvLyBpZiBjdXJyZW50X2NvdW50ID09IFN0cmluZygiMCIpOgogICAgYnl0ZWMgNCAvLyAiMCIKICAgID09CiAgICBieiByZWdpc3Rlcl9hZ2VuY3lfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTozOAogICAgLy8gc2VsZi5hZ2VuY3lfY291bnQudmFsdWUgPSBTdHJpbmcoIjEiKQogICAgYnl0ZWNfMCAvLyAiYWdlbmN5X2NvdW50IgogICAgYnl0ZWMgNSAvLyAiMSIKICAgIGFwcF9nbG9iYWxfcHV0CgpyZWdpc3Rlcl9hZ2VuY3lfYWZ0ZXJfaWZfZWxzZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyByZXR1cm4gU3RyaW5nKCJTVUNDRVNTOkFnZW5jeSAiKSArIGFnZW5jeV9uYW1lICsgU3RyaW5nKCIgcmVnaXN0ZXJlZCBmb3IgZXNjcm93IHNlcnZpY2UiKQogICAgcHVzaGJ5dGVzICJTVUNDRVNTOkFnZW5jeSAiCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIgcmVnaXN0ZXJlZCBmb3IgZXNjcm93IHNlcnZpY2UiCiAgICBjb25jYXQKICAgIHN3YXAKICAgIHJldHN1YgoKcmVnaXN0ZXJfYWdlbmN5X2Vsc2VfYm9keUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjM5CiAgICAvLyBlbGlmIGN1cnJlbnRfY291bnQgPT0gU3RyaW5nKCIxIik6CiAgICBmcmFtZV9kaWcgMAogICAgYnl0ZWMgNSAvLyAiMSIKICAgID09CiAgICBieiByZWdpc3Rlcl9hZ2VuY3lfZWxzZV9ib2R5QDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo0MAogICAgLy8gc2VsZi5hZ2VuY3lfY291bnQudmFsdWUgPSBTdHJpbmcoIjIiKQogICAgYnl0ZWNfMCAvLyAiYWdlbmN5X2NvdW50IgogICAgYnl0ZWMgNyAvLyAiMiIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBiIHJlZ2lzdGVyX2FnZW5jeV9hZnRlcl9pZl9lbHNlQDkKCnJlZ2lzdGVyX2FnZW5jeV9lbHNlX2JvZHlANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo0MQogICAgLy8gZWxpZiBjdXJyZW50X2NvdW50ID09IFN0cmluZygiMiIpOgogICAgZnJhbWVfZGlnIDAKICAgIGJ5dGVjIDcgLy8gIjIiCiAgICA9PQogICAgYnogcmVnaXN0ZXJfYWdlbmN5X2Vsc2VfYm9keUA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NDIKICAgIC8vIHNlbGYuYWdlbmN5X2NvdW50LnZhbHVlID0gU3RyaW5nKCIzIikKICAgIGJ5dGVjXzAgLy8gImFnZW5jeV9jb3VudCIKICAgIHB1c2hieXRlcyAiMyIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBiIHJlZ2lzdGVyX2FnZW5jeV9hZnRlcl9pZl9lbHNlQDkKCnJlZ2lzdGVyX2FnZW5jeV9lbHNlX2JvZHlANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo0NAogICAgLy8gc2VsZi5hZ2VuY3lfY291bnQudmFsdWUgPSBTdHJpbmcoIjMrIikKICAgIGJ5dGVjXzAgLy8gImFnZW5jeV9jb3VudCIKICAgIHB1c2hieXRlcyAiMysiCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiByZWdpc3Rlcl9hZ2VuY3lfYWZ0ZXJfaWZfZWxzZUA5CgoKLy8gc21hcnRfY29udHJhY3RzLmhlbGxvX3dvcmxkLmNvbnRyYWN0LkhlbGxvV29ybGQuc2VhcmNoX2FnZW5jaWVzKHNlYXJjaF90ZXJtOiBieXRlcykgLT4gYnl0ZXM6CnNlYXJjaF9hZ2VuY2llczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo0OC00OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgc2VhcmNoX2FnZW5jaWVzKHNlbGYsIHNlYXJjaF90ZXJtOiBTdHJpbmcpIC0+IFN0cmluZzoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjUxLTUyCiAgICAvLyAjIEluY3JlbWVudCBzZWFyY2ggY291bnRlcgogICAgLy8gY3VycmVudF9jb3VudCA9IHNlbGYuc2VhcmNoX2NvdW50LnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAic2VhcmNoX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zZWFyY2hfY291bnQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NTMKICAgIC8vIGlmIGN1cnJlbnRfY291bnQgPT0gU3RyaW5nKCIwIik6CiAgICBieXRlYyA0IC8vICIwIgogICAgPT0KICAgIGJ6IHNlYXJjaF9hZ2VuY2llc19lbHNlX2JvZHlAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjU0CiAgICAvLyBzZWxmLnNlYXJjaF9jb3VudC52YWx1ZSA9IFN0cmluZygiMSIpCiAgICBieXRlY18xIC8vICJzZWFyY2hfY291bnQiCiAgICBieXRlYyA1IC8vICIxIgogICAgYXBwX2dsb2JhbF9wdXQKCnNlYXJjaF9hZ2VuY2llc19hZnRlcl9pZl9lbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NjAtNjEKICAgIC8vICMgUmV0dXJuIGFsbCBhZ2VuY2llcyB3aXRoIHNlYXJjaCBtYXJrZXIKICAgIC8vIGFnZW5jaWVzX2RhdGEgPSBzZWxmLmFnZW5jaWVzX2xpc3QudmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhZ2VuY2llc19saXN0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFnZW5jaWVzX2xpc3QgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NjIKICAgIC8vIHJldHVybiBTdHJpbmcoIlNFQVJDSF9SRVNVTFRTOiIpICsgc2VhcmNoX3Rlcm0gKyBTdHJpbmcoIjoiKSArIGFnZW5jaWVzX2RhdGEKICAgIHB1c2hieXRlcyAiU0VBUkNIX1JFU1VMVFM6IgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiOiIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICByZXRzdWIKCnNlYXJjaF9hZ2VuY2llc19lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo1NQogICAgLy8gZWxpZiBjdXJyZW50X2NvdW50ID09IFN0cmluZygiMSIpOgogICAgZnJhbWVfZGlnIDAKICAgIGJ5dGVjIDUgLy8gIjEiCiAgICA9PQogICAgYnogc2VhcmNoX2FnZW5jaWVzX2Vsc2VfYm9keUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NTYKICAgIC8vIHNlbGYuc2VhcmNoX2NvdW50LnZhbHVlID0gU3RyaW5nKCIyIikKICAgIGJ5dGVjXzEgLy8gInNlYXJjaF9jb3VudCIKICAgIGJ5dGVjIDcgLy8gIjIiCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBzZWFyY2hfYWdlbmNpZXNfYWZ0ZXJfaWZfZWxzZUA2CgpzZWFyY2hfYWdlbmNpZXNfZWxzZV9ib2R5QDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QucHk6NTgKICAgIC8vIHNlbGYuc2VhcmNoX2NvdW50LnZhbHVlID0gU3RyaW5nKCIyKyIpCiAgICBieXRlY18xIC8vICJzZWFyY2hfY291bnQiCiAgICBwdXNoYnl0ZXMgIjIrIgogICAgYXBwX2dsb2JhbF9wdXQKICAgIGIgc2VhcmNoX2FnZW5jaWVzX2FmdGVyX2lmX2Vsc2VANgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5oZWxsb193b3JsZC5jb250cmFjdC5IZWxsb1dvcmxkLmdldF9hbGxfYWdlbmNpZXMoKSAtPiBieXRlczoKZ2V0X2FsbF9hZ2VuY2llczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5weTo2NwogICAgLy8gcmV0dXJuIFN0cmluZygiQUxMX0FHRU5DSUVTOiIpICsgc2VsZi5hZ2VuY2llc19saXN0LnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYWdlbmNpZXNfbGlzdCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZ2VuY2llc19saXN0IGV4aXN0cwogICAgcHVzaGJ5dGVzICJBTExfQUdFTkNJRVM6IgogICAgc3dhcAogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuaGVsbG9fd29ybGQuY29udHJhY3QuSGVsbG9Xb3JsZC5nZXRfc3RhdHMoKSAtPiBieXRlczoKZ2V0X3N0YXRzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LnB5OjcyCiAgICAvLyByZXR1cm4gU3RyaW5nKCJTVEFUUzpBZ2VuY2llczoiKSArIHNlbGYuYWdlbmN5X2NvdW50LnZhbHVlICsgU3RyaW5nKCI6U2VhcmNoZXM6IikgKyBzZWxmLnNlYXJjaF9jb3VudC52YWx1ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImFnZW5jeV9jb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZ2VuY3lfY291bnQgZXhpc3RzCiAgICBwdXNoYnl0ZXMgIlNUQVRTOkFnZW5jaWVzOiIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICI6U2VhcmNoZXM6IgogICAgY29uY2F0CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAic2VhcmNoX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNlYXJjaF9jb3VudCBleGlzdHMKICAgIGNvbmNhdAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAAEmCAxhZ2VuY3lfY291bnQMc2VhcmNoX2NvdW50DWFnZW5jaWVzX2xpc3QEFR98dQEwATEBfAEyMRhAAAwoJwRnKScEZyqAAGcxG0EBI4IGBAK+zhEEqpBKygSY/52HBJLOVl8EFJidKwTgnYTANhoAjgYA1ACkAIYAbgBWAAIiQzEZFEQxGESASBUffHUAQkFsZ29yYW5kIEVzY3JvdyBTZXJ2aWNlIC0gQ29ubmVjdGluZyBDbGllbnRzIHdpdGggVHJ1c3RlZCBBZ2VuY2llc7AjQzEZFEQxGESIAcRJFRZXBgJMUCtMULAjQzEZFEQxGESIAZZJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgFXAgCIAStJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgRXAgCIAGZJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgFXAgCIABlJFRZXBgJMUCtMULAjQzEZQP8JMRgURCNDigEBgAZIZWxsbyCL/1CAHSAtIFdlbGNvbWUgdG8gRXNjcm93IFNlcnZpY2UhUImKBAGL/CcGUIv9UCcGUIv+UCcGUIv/UIABO1AiKmVETFAqTGciKGVMSU8CRCcEEkEAOygnBWeAD1NVQ0NFU1M6QWdlbmN5IIv8UIAeIHJlZ2lzdGVyZWQgZm9yIGVzY3JvdyBzZXJ2aWNlUEyJiwAnBRJBAAcoJwdnQv+6iwAnBxJBAAgogAEzZ0L/qiiAAjMrZ0L/oYoBASIpZUxJTwJEJwQSQQAkKScFZyIqZUSAD1NFQVJDSF9SRVNVTFRTOov/UIABOlBMUEyJiwAnBRJBAAcpJwdnQv/RKYACMitnQv/IIiplRIANQUxMX0FHRU5DSUVTOkxQiSIoZUSAD1NUQVRTOkFnZW5jaWVzOkxQgAo6U2VhcmNoZXM6UCIpZURQiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the HelloWorld contract
 */
export type HelloWorldArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'register_agency(string,string,string,string)string': {
      agencyName: string
      description: string
      contactInfo: string
      walletAddress: string
    }
    'search_agencies(string)string': {
      searchTerm: string
    }
    'get_all_agencies()string': Record<string, never>
    'get_stats()string': Record<string, never>
    'get_service_info()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'register_agency(string,string,string,string)string': [agencyName: string, description: string, contactInfo: string, walletAddress: string]
    'search_agencies(string)string': [searchTerm: string]
    'get_all_agencies()string': []
    'get_stats()string': []
    'get_service_info()string': []
  }
}

/**
 * The return type for each method
 */
export type HelloWorldReturns = {
  'hello(string)string': string
  'register_agency(string,string,string,string)string': string
  'search_agencies(string)string': string
  'get_all_agencies()string': string
  'get_stats()string': string
  'get_service_info()string': string
}

/**
 * Defines the types of available calls and state of the HelloWorld smart contract.
 */
export type HelloWorldTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: HelloWorldArgs['obj']['hello(string)string']
      argsTuple: HelloWorldArgs['tuple']['hello(string)string']
      returns: HelloWorldReturns['hello(string)string']
    }>
    & Record<'register_agency(string,string,string,string)string' | 'register_agency', {
      argsObj: HelloWorldArgs['obj']['register_agency(string,string,string,string)string']
      argsTuple: HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']
      returns: HelloWorldReturns['register_agency(string,string,string,string)string']
    }>
    & Record<'search_agencies(string)string' | 'search_agencies', {
      argsObj: HelloWorldArgs['obj']['search_agencies(string)string']
      argsTuple: HelloWorldArgs['tuple']['search_agencies(string)string']
      returns: HelloWorldReturns['search_agencies(string)string']
    }>
    & Record<'get_all_agencies()string' | 'get_all_agencies', {
      argsObj: HelloWorldArgs['obj']['get_all_agencies()string']
      argsTuple: HelloWorldArgs['tuple']['get_all_agencies()string']
      returns: HelloWorldReturns['get_all_agencies()string']
    }>
    & Record<'get_stats()string' | 'get_stats', {
      argsObj: HelloWorldArgs['obj']['get_stats()string']
      argsTuple: HelloWorldArgs['tuple']['get_stats()string']
      returns: HelloWorldReturns['get_stats()string']
    }>
    & Record<'get_service_info()string' | 'get_service_info', {
      argsObj: HelloWorldArgs['obj']['get_service_info()string']
      argsTuple: HelloWorldArgs['tuple']['get_service_info()string']
      returns: HelloWorldReturns['get_service_info()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        agencyCount: string
        searchCount: string
        agenciesList: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type HelloWorldSignatures = keyof HelloWorldTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type HelloWorldNonVoidMethodSignatures = keyof HelloWorldTypes['methods'] extends infer T ? T extends keyof HelloWorldTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the HelloWorld smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends HelloWorldSignatures> = HelloWorldTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the HelloWorld smart contract to the method's return type
 */
export type MethodReturn<TSignature extends HelloWorldSignatures> = HelloWorldTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = HelloWorldTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type HelloWorldCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type HelloWorldDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: HelloWorldCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the HelloWorld smart contract
 */
export abstract class HelloWorldParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Test connectivity
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<HelloWorldArgs['obj']['hello(string)string'] | HelloWorldArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the register_agency(string,string,string,string)string ABI method
   *
   * Register agency with wallet address for escrow
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerAgency(params: CallParams<HelloWorldArgs['obj']['register_agency(string,string,string,string)string'] | HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register_agency(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.agencyName, params.args.description, params.args.contactInfo, params.args.walletAddress],
    }
  }
  /**
   * Constructs a no op call for the search_agencies(string)string ABI method
   *
   * Search agencies by name or service
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static searchAgencies(params: CallParams<HelloWorldArgs['obj']['search_agencies(string)string'] | HelloWorldArgs['tuple']['search_agencies(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'search_agencies(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.searchTerm],
    }
  }
  /**
   * Constructs a no op call for the get_all_agencies()string ABI method
   *
   * Get all registered agencies
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllAgencies(params: CallParams<HelloWorldArgs['obj']['get_all_agencies()string'] | HelloWorldArgs['tuple']['get_all_agencies()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_all_agencies()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_stats()string ABI method
   *
   * Get service statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStats(params: CallParams<HelloWorldArgs['obj']['get_stats()string'] | HelloWorldArgs['tuple']['get_stats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_stats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_service_info()string ABI method
   *
   * Get service information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getServiceInfo(params: CallParams<HelloWorldArgs['obj']['get_service_info()string'] | HelloWorldArgs['tuple']['get_service_info()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_service_info()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the HelloWorld smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class HelloWorldFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `HelloWorldFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new HelloWorldClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new HelloWorldClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the HelloWorld smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: HelloWorldDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new HelloWorldClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HelloWorld smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HelloWorld smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HelloWorld smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new HelloWorldClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the HelloWorld smart contract
 */
export class HelloWorldClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `HelloWorldClient`
   *
   * @param appClient An `AppClient` instance which has been created with the HelloWorld app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `HelloWorldClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends HelloWorldNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `HelloWorldClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<HelloWorldClient> {
    return new HelloWorldClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `HelloWorldClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<HelloWorldClient> {
    return new HelloWorldClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the HelloWorld smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `hello(string)string` ABI method.
     *
     * Test connectivity
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<HelloWorldArgs['obj']['hello(string)string'] | HelloWorldArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldParamsFactory.hello(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `register_agency(string,string,string,string)string` ABI method.
     *
     * Register agency with wallet address for escrow
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerAgency: (params: CallParams<HelloWorldArgs['obj']['register_agency(string,string,string,string)string'] | HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldParamsFactory.registerAgency(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `search_agencies(string)string` ABI method.
     *
     * Search agencies by name or service
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    searchAgencies: (params: CallParams<HelloWorldArgs['obj']['search_agencies(string)string'] | HelloWorldArgs['tuple']['search_agencies(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldParamsFactory.searchAgencies(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_all_agencies()string` ABI method.
     *
     * Get all registered agencies
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllAgencies: (params: CallParams<HelloWorldArgs['obj']['get_all_agencies()string'] | HelloWorldArgs['tuple']['get_all_agencies()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloWorldParamsFactory.getAllAgencies(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_stats()string` ABI method.
     *
     * Get service statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStats: (params: CallParams<HelloWorldArgs['obj']['get_stats()string'] | HelloWorldArgs['tuple']['get_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloWorldParamsFactory.getStats(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_service_info()string` ABI method.
     *
     * Get service information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getServiceInfo: (params: CallParams<HelloWorldArgs['obj']['get_service_info()string'] | HelloWorldArgs['tuple']['get_service_info()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloWorldParamsFactory.getServiceInfo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the HelloWorld smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `hello(string)string` ABI method.
     *
     * Test connectivity
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<HelloWorldArgs['obj']['hello(string)string'] | HelloWorldArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldParamsFactory.hello(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `register_agency(string,string,string,string)string` ABI method.
     *
     * Register agency with wallet address for escrow
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerAgency: (params: CallParams<HelloWorldArgs['obj']['register_agency(string,string,string,string)string'] | HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldParamsFactory.registerAgency(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `search_agencies(string)string` ABI method.
     *
     * Search agencies by name or service
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    searchAgencies: (params: CallParams<HelloWorldArgs['obj']['search_agencies(string)string'] | HelloWorldArgs['tuple']['search_agencies(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldParamsFactory.searchAgencies(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_all_agencies()string` ABI method.
     *
     * Get all registered agencies
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllAgencies: (params: CallParams<HelloWorldArgs['obj']['get_all_agencies()string'] | HelloWorldArgs['tuple']['get_all_agencies()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloWorldParamsFactory.getAllAgencies(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_stats()string` ABI method.
     *
     * Get service statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStats: (params: CallParams<HelloWorldArgs['obj']['get_stats()string'] | HelloWorldArgs['tuple']['get_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloWorldParamsFactory.getStats(params))
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_service_info()string` ABI method.
     *
     * Get service information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getServiceInfo: (params: CallParams<HelloWorldArgs['obj']['get_service_info()string'] | HelloWorldArgs['tuple']['get_service_info()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloWorldParamsFactory.getServiceInfo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the HelloWorld smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `hello(string)string` ABI method.
     *
     * Test connectivity
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<HelloWorldArgs['obj']['hello(string)string'] | HelloWorldArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `register_agency(string,string,string,string)string` ABI method.
     *
     * Register agency with wallet address for escrow
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerAgency: async (params: CallParams<HelloWorldArgs['obj']['register_agency(string,string,string,string)string'] | HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldParamsFactory.registerAgency(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldReturns['register_agency(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `search_agencies(string)string` ABI method.
     *
     * Search agencies by name or service
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    searchAgencies: async (params: CallParams<HelloWorldArgs['obj']['search_agencies(string)string'] | HelloWorldArgs['tuple']['search_agencies(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldParamsFactory.searchAgencies(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldReturns['search_agencies(string)string'])}
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_all_agencies()string` ABI method.
     *
     * Get all registered agencies
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllAgencies: async (params: CallParams<HelloWorldArgs['obj']['get_all_agencies()string'] | HelloWorldArgs['tuple']['get_all_agencies()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloWorldParamsFactory.getAllAgencies(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldReturns['get_all_agencies()string'])}
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_stats()string` ABI method.
     *
     * Get service statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStats: async (params: CallParams<HelloWorldArgs['obj']['get_stats()string'] | HelloWorldArgs['tuple']['get_stats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloWorldParamsFactory.getStats(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldReturns['get_stats()string'])}
    },

    /**
     * Makes a call to the HelloWorld smart contract using the `get_service_info()string` ABI method.
     *
     * Get service information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getServiceInfo: async (params: CallParams<HelloWorldArgs['obj']['get_service_info()string'] | HelloWorldArgs['tuple']['get_service_info()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloWorldParamsFactory.getServiceInfo(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldReturns['get_service_info()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new HelloWorldClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current HelloWorld app
   */
  state = {
    /**
     * Methods to access global state for the current HelloWorld app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          agencyCount: result.agency_count,
          searchCount: result.search_count,
          agenciesList: result.agencies_list,
        }
      },
      /**
       * Get the current value of the agency_count key in global state
       */
      agencyCount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("agency_count")) as string | undefined },
      /**
       * Get the current value of the search_count key in global state
       */
      searchCount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("search_count")) as string | undefined },
      /**
       * Get the current value of the agencies_list key in global state
       */
      agenciesList: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("agencies_list")) as string | undefined },
    },
  }

  public newGroup(): HelloWorldComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the HelloWorld contract
       */
      hello(params: CallParams<HelloWorldArgs['obj']['hello(string)string'] | HelloWorldArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a register_agency(string,string,string,string)string method call against the HelloWorld contract
       */
      registerAgency(params: CallParams<HelloWorldArgs['obj']['register_agency(string,string,string,string)string'] | HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerAgency(params)))
        resultMappers.push((v) => client.decodeReturnValue('register_agency(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a search_agencies(string)string method call against the HelloWorld contract
       */
      searchAgencies(params: CallParams<HelloWorldArgs['obj']['search_agencies(string)string'] | HelloWorldArgs['tuple']['search_agencies(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.searchAgencies(params)))
        resultMappers.push((v) => client.decodeReturnValue('search_agencies(string)string', v))
        return this
      },
      /**
       * Add a get_all_agencies()string method call against the HelloWorld contract
       */
      getAllAgencies(params: CallParams<HelloWorldArgs['obj']['get_all_agencies()string'] | HelloWorldArgs['tuple']['get_all_agencies()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllAgencies(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_all_agencies()string', v))
        return this
      },
      /**
       * Add a get_stats()string method call against the HelloWorld contract
       */
      getStats(params: CallParams<HelloWorldArgs['obj']['get_stats()string'] | HelloWorldArgs['tuple']['get_stats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_stats()string', v))
        return this
      },
      /**
       * Add a get_service_info()string method call against the HelloWorld contract
       */
      getServiceInfo(params: CallParams<HelloWorldArgs['obj']['get_service_info()string'] | HelloWorldArgs['tuple']['get_service_info()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getServiceInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_service_info()string', v))
        return this
      },
      /**
       * Add a clear state call to the HelloWorld contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as HelloWorldComposer
  }
}
export type HelloWorldComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * Test connectivity
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<HelloWorldArgs['obj']['hello(string)string'] | HelloWorldArgs['tuple']['hello(string)string']>): HelloWorldComposer<[...TReturns, HelloWorldReturns['hello(string)string'] | undefined]>

  /**
   * Calls the register_agency(string,string,string,string)string ABI method.
   *
   * Register agency with wallet address for escrow
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerAgency(params?: CallParams<HelloWorldArgs['obj']['register_agency(string,string,string,string)string'] | HelloWorldArgs['tuple']['register_agency(string,string,string,string)string']>): HelloWorldComposer<[...TReturns, HelloWorldReturns['register_agency(string,string,string,string)string'] | undefined]>

  /**
   * Calls the search_agencies(string)string ABI method.
   *
   * Search agencies by name or service
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  searchAgencies(params?: CallParams<HelloWorldArgs['obj']['search_agencies(string)string'] | HelloWorldArgs['tuple']['search_agencies(string)string']>): HelloWorldComposer<[...TReturns, HelloWorldReturns['search_agencies(string)string'] | undefined]>

  /**
   * Calls the get_all_agencies()string ABI method.
   *
   * Get all registered agencies
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllAgencies(params?: CallParams<HelloWorldArgs['obj']['get_all_agencies()string'] | HelloWorldArgs['tuple']['get_all_agencies()string']>): HelloWorldComposer<[...TReturns, HelloWorldReturns['get_all_agencies()string'] | undefined]>

  /**
   * Calls the get_stats()string ABI method.
   *
   * Get service statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStats(params?: CallParams<HelloWorldArgs['obj']['get_stats()string'] | HelloWorldArgs['tuple']['get_stats()string']>): HelloWorldComposer<[...TReturns, HelloWorldReturns['get_stats()string'] | undefined]>

  /**
   * Calls the get_service_info()string ABI method.
   *
   * Get service information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getServiceInfo(params?: CallParams<HelloWorldArgs['obj']['get_service_info()string'] | HelloWorldArgs['tuple']['get_service_info()string']>): HelloWorldComposer<[...TReturns, HelloWorldReturns['get_service_info()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the HelloWorld smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): HelloWorldComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): HelloWorldComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<HelloWorldComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<HelloWorldComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<HelloWorldComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<HelloWorldComposerResults<TReturns>>
}
export type HelloWorldComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

