#pragma version 10
#pragma typetrack false

// smart_contracts.hello_world.contract.HelloWorld.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 "total_agencies" "total_searches"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.py:7
    // self.total_agencies = GlobalState(UInt64(0))
    bytec_1 // "total_agencies"
    intc_1 // 0
    app_global_put
    // smart_contracts/hello_world/contract.py:8
    // self.total_searches = GlobalState(UInt64(0))
    bytec_2 // "total_searches"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.py:5
    // class HelloWorld(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x212b4225 0x98ff9d87 0xaf362e91 0xd62149a7 0x7b16dc7f 0x02bece11 // method "register_agency(string,string,string)string", method "search_agencies(string)string", method "get_agency_count()uint64", method "get_search_count()uint64", method "get_registry_info()string", method "hello(string)string"
    txna ApplicationArgs 0
    match main_register_agency_route@5 main_search_agencies_route@6 main_get_agency_count_route@7 main_get_search_count_route@8 main_get_registry_info_route@9 main_hello_route@10

main_after_if_else@13:
    // smart_contracts/hello_world/contract.py:5
    // class HelloWorld(ARC4Contract):
    intc_1 // 0
    return

main_hello_route@10:
    // smart_contracts/hello_world/contract.py:49
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:5
    // class HelloWorld(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/hello_world/contract.py:49
    // @abimethod()
    callsub hello
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_registry_info_route@9:
    // smart_contracts/hello_world/contract.py:44
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c75003a436c69656e742d4167656e6379205265676973747279202d2041637469766520616e6420747261636b696e6720726567697374726174696f6e73
    log
    intc_0 // 1
    return

main_get_search_count_route@8:
    // smart_contracts/hello_world/contract.py:39
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_search_count
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_agency_count_route@7:
    // smart_contracts/hello_world/contract.py:34
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_agency_count
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_search_agencies_route@6:
    // smart_contracts/hello_world/contract.py:25
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:5
    // class HelloWorld(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/hello_world/contract.py:25
    // @abimethod()
    callsub search_agencies
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_register_agency_route@5:
    // smart_contracts/hello_world/contract.py:10
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.py:5
    // class HelloWorld(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // smart_contracts/hello_world/contract.py:10
    // @abimethod()
    callsub register_agency
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@11:
    // smart_contracts/hello_world/contract.py:5
    // class HelloWorld(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.hello_world.contract.HelloWorld.register_agency(name: bytes, description: bytes, contact_info: bytes) -> bytes:
register_agency:
    // smart_contracts/hello_world/contract.py:10-16
    // @abimethod()
    // def register_agency(
    //     self,
    //     name: String,
    //     description: String,
    //     contact_info: String
    // ) -> String:
    proto 3 1
    // smart_contracts/hello_world/contract.py:19-21
    // # In a real implementation, you would store this data in box storage
    // # For now, just increment the counter
    // self.total_agencies.value = self.total_agencies.value + UInt64(1)
    intc_1 // 0
    bytec_1 // "total_agencies"
    app_global_get_ex
    assert // check self.total_agencies exists
    intc_0 // 1
    +
    bytec_1 // "total_agencies"
    swap
    app_global_put
    // smart_contracts/hello_world/contract.py:23
    // return String("Agency registered successfully: ") + name
    pushbytes "Agency registered successfully: "
    frame_dig -3
    concat
    retsub


// smart_contracts.hello_world.contract.HelloWorld.search_agencies(search_term: bytes) -> bytes:
search_agencies:
    // smart_contracts/hello_world/contract.py:25-26
    // @abimethod()
    // def search_agencies(self, search_term: String) -> String:
    proto 1 1
    // smart_contracts/hello_world/contract.py:29-30
    // # Increment search counter
    // self.total_searches.value = self.total_searches.value + UInt64(1)
    intc_1 // 0
    bytec_2 // "total_searches"
    app_global_get_ex
    assert // check self.total_searches exists
    intc_0 // 1
    +
    bytec_2 // "total_searches"
    swap
    app_global_put
    // smart_contracts/hello_world/contract.py:32
    // return String("Search results for: ") + search_term + String(" (Found agencies will be listed here)")
    pushbytes "Search results for: "
    frame_dig -1
    concat
    pushbytes " (Found agencies will be listed here)"
    concat
    retsub


// smart_contracts.hello_world.contract.HelloWorld.get_agency_count() -> uint64:
get_agency_count:
    // smart_contracts/hello_world/contract.py:37
    // return self.total_agencies.value
    intc_1 // 0
    bytec_1 // "total_agencies"
    app_global_get_ex
    assert // check self.total_agencies exists
    retsub


// smart_contracts.hello_world.contract.HelloWorld.get_search_count() -> uint64:
get_search_count:
    // smart_contracts/hello_world/contract.py:42
    // return self.total_searches.value
    intc_1 // 0
    bytec_2 // "total_searches"
    app_global_get_ex
    assert // check self.total_searches exists
    retsub


// smart_contracts.hello_world.contract.HelloWorld.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/hello_world/contract.py:49-50
    // @abimethod()
    // def hello(self, name: String) -> String:
    proto 1 1
    // smart_contracts/hello_world/contract.py:52
    // return String("Hello, ") + name
    pushbytes "Hello, "
    frame_dig -1
    concat
    retsub
